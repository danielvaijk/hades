/**
 * Notes about this configuration.
 *
 * 1. Don't add any formatting-related rules, as those are cleared via
 *    eslint-config-prettier, anyway.
 */
{
    "parser": "babel-eslint",
    "parserOptions": {
        "sourceType": "module",
        "ecmaFeatures": {
            "globalReturn": false,
            "impliedStrict": true,
            "jsx": false
        }
    },
    "extends": [
        "eslint:recommended",
        "plugin:import/errors",
        "plugin:import/warnings",
        // Must be the last plugin in the extension array.
        // Will disable all formatting-related ESLint rules.
        "plugin:prettier/recommended"
    ],
    "rules": {
        "semi": "error",
        "prettier/prettier": [
            "error",
            {},
            {
                "usePrettierrc": true
            }
        ],
        /**
         * Rules for possible errors.
         */
        "for-direction": "error",
        "getter-return": [
            "error",
            {
                "allowImplicit": false
            }
        ],
        "no-async-promise-executor": "error",
        "no-await-in-loop": "warn",
        "no-compare-neg-zero": "error",
        "no-cond-assign": ["error", "always"],
        "no-console": [
            "error",
            {
                "allow": ["warn"]
            }
        ],
        "no-constant-condition": [
            "error",
            {
                "checkLoops": true
            }
        ],
        "no-control-regex": "error",
        "no-debugger": "error",
        "no-dupe-args": "error",
        "no-dupe-else-if": "error",
        "no-dupe-keys": "error",
        "no-duplicate-case": "error",
        "no-empty": [
            "error",
            {
                "allowEmptyCatch": false
            }
        ],
        "no-empty-character-class": "error",
        "no-ex-assign": "error",
        "no-extra-boolean-cast": [
            "error",
            {
                "enforceForLogicalOperands": true
            }
        ],
        "no-extra-parens": ["error", "all"],
        "no-extra-semi": "error",
        "no-func-assign": "error",
        "no-import-assign": "error",
        "no-inner-declarations": ["error", "both"],
        "no-invalid-regexp": "error",
        "no-irregular-whitespace": [
            "error",
            {
                "skipStrings": false,
                "skipComments": false,
                "skipRegExps": false,
                "skipTemplates": false
            }
        ],
        "no-loss-of-precision": "error",
        "no-misleading-character-class": "error",
        "no-obj-calls": "error",
        "no-promise-executor-return": "error",
        "no-prototype-builtins": "error",
        "no-regex-spaces": "error",
        "no-setter-return": "error",
        "no-sparse-arrays": "error",
        "no-template-curly-in-string": "error",
        "no-unexpected-multiline": "error",
        "no-unreachable": "error",
        "no-unreachable-loop": "error",
        "no-unsafe-finally": "error",
        "no-unsafe-negation": [
            "error",
            {
                "enforceForOrderingRelations": true
            }
        ],
        "no-useless-backreference": "error",
        "require-atomic-updates": "error",
        "use-isnan": "error",
        "valid-typeof": [
            "error",
            {
                "requireStringLiterals": false
            }
        ],
        /**
         * Rules for best practices.
         */
        "accessor-pairs": [
            "error",
            {
                "setWithoutGet": false,
                "getWithoutSet": false,
                "enforceForClassMembers": true
            }
        ],
        "array-callback-return": [
            "error",
            {
                "allowImplicit": false,
                "checkForEach": true
            }
        ],
        "block-scoped-var": "error",
        "class-methods-use-this": "off",
        "complexity": ["warn", 10],
        "consistent-return": [
            "error",
            {
                "treatUndefinedAsUnspecified": true
            }
        ],
        "curly": ["error", "all"],
        "default-case": "error",
        "default-case-last": "error",
        "default-param-last": "error",
        "dot-location": ["error", "property"],
        "dot-notation": "error",
        "eqeqeq": "error",
        "grouped-accessor-pairs": ["error", "getBeforeSet"],
        "guard-for-in": "error",
        "max-classes-per-file": ["error", 1],
        "no-alert": "error",
        "no-caller": "error",
        "no-case-declarations": "error",
        "no-constructor-return": "error",
        "no-div-regex": "error",
        "no-else-return": "off",
        "no-empty-function": "error",
        "no-empty-pattern": "error",
        "no-eq-null": "error",
        "no-eval": "error",
        "no-extend-native": "error",
        "no-extra-bind": "error",
        "no-extra-label": "error",
        "no-fallthrough": "error",
        "no-floating-decimal": "error",
        "no-global-assign": "error",
        "no-implicit-coercion": "error",
        "no-implicit-globals": [
            "error",
            {
                "lexicalBindings": true
            }
        ],
        "no-implied-eval": "error",
        "no-invalid-this": "error",
        "no-iterator": "error",
        "no-labels": [
            "error",
            {
                "allowLoop": false,
                "allowSwitch": false
            }
        ],
        "no-lone-blocks": "error",
        "no-loop-func": "error",
        "no-magic-numbers": [
            "error",
            {
                "ignore": [1],
                "ignoreArrayIndexes": true,
                "ignoreDefaultValues": false,
                "enforceConst": true,
                "detectObjects": true
            }
        ],
        "no-multi-spaces": "error",
        "no-multi-str": "error",
        "no-new": "error",
        "no-new-func": "error",
        "no-new-wrappers": "off",
        "no-octal": "error",
        "no-octal-escape": "error",
        "no-param-reassign": [
            "error",
            {
                "props": false
            }
        ],
        "no-proto": "error",
        "no-redeclare": "error",
        "no-restricted-properties": "off",
        "no-return-assign": ["error", "always"],
        "no-return-await": "warn",
        "no-script-url": "error",
        "no-self-assign": [
            "error",
            {
                "props": true
            }
        ],
        "no-self-compare": "error",
        "no-sequences": "error",
        "no-throw-literal": "error",
        "no-unmodified-loop-condition": "error",
        "no-unused-expressions": [
            "error",
            {
                "allowShortCircuit": false,
                "allowTernary": false,
                "allowTaggedTemplates": false
            }
        ],
        "no-unused-labels": "error",
        "no-useless-call": "error",
        "no-useless-catch": "error",
        "no-useless-concat": "error",
        "no-useless-escape": "error",
        "no-useless-return": "error",
        "no-void": [
            "error",
            {
                "allowAsStatement": false
            }
        ],
        "no-warning-comments": [
            "warn",
            {
                "terms": ["todo", "fixme"],
                "location": "start"
            }
        ],
        "no-with": "error",
        "prefer-named-capture-group": "error",
        "prefer-promise-reject-errors": [
            "error",
            {
                "allowEmptyReject": false
            }
        ],
        "prefer-regex-literals": "error",
        "radix": ["error", "always"],
        "require-await": "error",
        "require-unicode-regexp": "error",
        "vars-on-top": "error",
        "wrap-iife": [
            "error",
            "inside",
            {
                "functionPrototypeMethods": false
            }
        ],
        "yoda": [
            "error",
            "never",
            {
                "exceptRange": false,
                "onlyEquality": false
            }
        ]
    },
    "plugins": ["import", "prettier"],
    "env": {
        // This also automatically sets parserOptions.ecmaVersion to '11'.
        "es2020": true,
        "browser": true
    },
    "reportUnusedDisableDirectives": true
}
