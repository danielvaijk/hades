!(function (e, t) {
    for (var n in t) e[n] = t[n];
})(
    this,
    (function (e) {
        var t = {};
        function n(r) {
            if (t[r]) return t[r].exports;
            var o = (t[r] = { i: r, l: !1, exports: {} });
            return e[r].call(o.exports, o, o.exports, n), (o.l = !0), o.exports;
        }
        return (
            (n.m = e),
            (n.c = t),
            (n.d = function (e, t, r) {
                n.o(e, t) ||
                    Object.defineProperty(e, t, { enumerable: !0, get: r });
            }),
            (n.r = function (e) {
                "undefined" != typeof Symbol &&
                    Symbol.toStringTag &&
                    Object.defineProperty(e, Symbol.toStringTag, {
                        value: "Module",
                    }),
                    Object.defineProperty(e, "__esModule", { value: !0 });
            }),
            (n.t = function (e, t) {
                if ((1 & t && (e = n(e)), 8 & t)) return e;
                if (4 & t && "object" == typeof e && e && e.__esModule)
                    return e;
                var r = Object.create(null);
                if (
                    (n.r(r),
                    Object.defineProperty(r, "default", {
                        enumerable: !0,
                        value: e,
                    }),
                    2 & t && "string" != typeof e)
                )
                    for (var o in e)
                        n.d(
                            r,
                            o,
                            function (t) {
                                return e[t];
                            }.bind(null, o)
                        );
                return r;
            }),
            (n.n = function (e) {
                var t =
                    e && e.__esModule
                        ? function () {
                              return e.default;
                          }
                        : function () {
                              return e;
                          };
                return n.d(t, "a", t), t;
            }),
            (n.o = function (e, t) {
                return Object.prototype.hasOwnProperty.call(e, t);
            }),
            (n.p = ""),
            n((n.s = 0))
        );
    })([
        function (e, t, n) {
            "use strict";
            function r(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            n.r(t),
                n.d(t, "Model", function () {
                    return m;
                }),
                n.d(t, "Schema", function () {
                    return P;
                }),
                n.d(t, "Database", function () {
                    return X;
                });
            var o = (function () {
                function e(t) {
                    !(function (e, t) {
                        if (!(e instanceof t))
                            throw new TypeError(
                                "Cannot call a class as a function"
                            );
                    })(this, e),
                        (this._type = t.type),
                        (this._ModelClass = t.ModelClass),
                        (this._fieldsOrNull = t.fields || null),
                        (this._modelIdOrNull = t.modelId || null),
                        (this._willApplyToEntireTable =
                            t.willApplyToEntireTable || !1);
                }
                var t, n, o;
                return (
                    (t = e),
                    (n = [
                        {
                            key: "getType",
                            value: function () {
                                return this._type;
                            },
                        },
                        {
                            key: "getModelClass",
                            value: function () {
                                return this._ModelClass;
                            },
                        },
                        {
                            key: "getModelIdOrNull",
                            value: function () {
                                return this._modelIdOrNull;
                            },
                        },
                        {
                            key: "getWillApplyToEntireTable",
                            value: function () {
                                return this._willApplyToEntireTable;
                            },
                        },
                        {
                            key: "getFieldsOrNull",
                            value: function () {
                                return this._fieldsOrNull;
                            },
                        },
                    ]) && r(t.prototype, n),
                    o && r(t, o),
                    e
                );
            })();
            function i(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            var u = (function () {
                function e(t, n) {
                    !(function (e, t) {
                        if (!(e instanceof t))
                            throw new TypeError(
                                "Cannot call a class as a function"
                            );
                    })(this, e),
                        (this._key = t),
                        (this._value = n);
                }
                var t, n, r;
                return (
                    (t = e),
                    (n = [
                        {
                            key: "getKey",
                            value: function () {
                                return this._key;
                            },
                        },
                        {
                            key: "getValue",
                            value: function () {
                                return this._value;
                            },
                        },
                        {
                            key: "equals",
                            value: function (e) {
                                return e.getKey() === this._key;
                            },
                        },
                    ]) && i(t.prototype, n),
                    r && i(t, r),
                    e
                );
            })();
            function a(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            var l = (function () {
                function e() {
                    !(function (e, t) {
                        if (!(e instanceof t))
                            throw new TypeError(
                                "Cannot call a class as a function"
                            );
                    })(this, e);
                }
                var t, n, r;
                return (
                    (t = e),
                    (r = [
                        {
                            key: "INSERT",
                            value: function () {
                                return new u("INSERT", "INSERT");
                            },
                        },
                        {
                            key: "UPDATE",
                            value: function () {
                                return new u("UPDATE", "UPDATE");
                            },
                        },
                        {
                            key: "UPSERT",
                            value: function () {
                                return new u("UPSERT", "UPSERT");
                            },
                        },
                        {
                            key: "DELETE",
                            value: function () {
                                return new u("DELETE", "DELETE");
                            },
                        },
                    ]),
                    (n = null) && a(t.prototype, n),
                    r && a(t, r),
                    e
                );
            })();
            function c(e) {
                return (c =
                    "function" == typeof Symbol &&
                    "symbol" == typeof Symbol.iterator
                        ? function (e) {
                              return typeof e;
                          }
                        : function (e) {
                              return e &&
                                  "function" == typeof Symbol &&
                                  e.constructor === Symbol &&
                                  e !== Symbol.prototype
                                  ? "symbol"
                                  : typeof e;
                          })(e);
            }
            function s(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function");
            }
            function f(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            function y(e, t) {
                return !t || ("object" !== c(t) && "function" != typeof t)
                    ? (function (e) {
                          if (void 0 === e)
                              throw new ReferenceError(
                                  "this hasn't been initialised - super() hasn't been called"
                              );
                          return e;
                      })(e)
                    : t;
            }
            function p(e) {
                var t = "function" == typeof Map ? new Map() : void 0;
                return (p = function (e) {
                    if (
                        null === e ||
                        ((n = e),
                        -1 ===
                            Function.toString.call(n).indexOf("[native code]"))
                    )
                        return e;
                    var n;
                    if ("function" != typeof e)
                        throw new TypeError(
                            "Super expression must either be null or a function"
                        );
                    if (void 0 !== t) {
                        if (t.has(e)) return t.get(e);
                        t.set(e, r);
                    }
                    function r() {
                        return d(e, arguments, v(this).constructor);
                    }
                    return (
                        (r.prototype = Object.create(e.prototype, {
                            constructor: {
                                value: r,
                                enumerable: !1,
                                writable: !0,
                                configurable: !0,
                            },
                        })),
                        b(r, e)
                    );
                })(e);
            }
            function d(e, t, n) {
                return (d = h()
                    ? Reflect.construct
                    : function (e, t, n) {
                          var r = [null];
                          r.push.apply(r, t);
                          var o = new (Function.bind.apply(e, r))();
                          return n && b(o, n.prototype), o;
                      }).apply(null, arguments);
            }
            function h() {
                if ("undefined" == typeof Reflect || !Reflect.construct)
                    return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                    return (
                        Date.prototype.toString.call(
                            Reflect.construct(Date, [], function () {})
                        ),
                        !0
                    );
                } catch (e) {
                    return !1;
                }
            }
            function b(e, t) {
                return (b =
                    Object.setPrototypeOf ||
                    function (e, t) {
                        return (e.__proto__ = t), e;
                    })(e, t);
            }
            function v(e) {
                return (v = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (e) {
                          return e.__proto__ || Object.getPrototypeOf(e);
                      })(e);
            }
            var w = (function (e) {
                !(function (e, t) {
                    if ("function" != typeof t && null !== t)
                        throw new TypeError(
                            "Super expression must either be null or a function"
                        );
                    (e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            writable: !0,
                            configurable: !0,
                        },
                    })),
                        t && b(e, t);
                })(a, e);
                var t,
                    n,
                    r,
                    o,
                    i,
                    u =
                        ((t = a),
                        (n = h()),
                        function () {
                            var e,
                                r = v(t);
                            if (n) {
                                var o = v(this).constructor;
                                e = Reflect.construct(r, arguments, o);
                            } else e = r.apply(this, arguments);
                            return y(this, e);
                        });
                function a() {
                    return s(this, a), u.apply(this, arguments);
                }
                return (
                    (r = a),
                    (o = [
                        {
                            key: "name",
                            get: function () {
                                return "HadesValidationError";
                            },
                            set: function (e) {},
                        },
                    ]) && f(r.prototype, o),
                    i && f(r, i),
                    a
                );
            })(p(Error));
            function g(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            var m = (function () {
                function e(t, n) {
                    !(function (e, t) {
                        if (!(e instanceof t))
                            throw new TypeError(
                                "Cannot call a class as a function"
                            );
                    })(this, e),
                        (this.modelId = n),
                        (this.ModelClass = t),
                        (this.session = this.ModelClass.session),
                        (this.tableKey = this.ModelClass.tableKey),
                        (this.identifierKey = this.ModelClass.identifierKey);
                    var r = this.ModelClass.fields(),
                        o = this._getInstanceRowFromStateOrNull();
                    if (!o)
                        throw new w("No data exists for this Model instance.");
                    this.fields = r.castValuesAgainstDefinition(o);
                }
                var t, n, r;
                return (
                    (t = e),
                    (r = [
                        {
                            key: "create",
                            value: function (e) {
                                this.session.applyMutation(
                                    new o({
                                        fields: e,
                                        ModelClass: this,
                                        type: l.INSERT(),
                                    })
                                );
                            },
                        },
                        {
                            key: "upsert",
                            value: function (e) {
                                this.session.applyMutation(
                                    new o({
                                        fields: e,
                                        ModelClass: this,
                                        type: l.UPSERT(),
                                    })
                                );
                            },
                        },
                        {
                            key: "deleteAll",
                            value: function () {
                                this.session.applyMutation(
                                    new o({
                                        ModelClass: this,
                                        willApplyToEntireTable: !0,
                                        type: l.DELETE(),
                                    })
                                );
                            },
                        },
                        {
                            key: "withId",
                            value: function (t) {
                                return new e(this, t);
                            },
                        },
                        {
                            key: "getTableKeyOrNull",
                            value: function () {
                                return this.tableKey || null;
                            },
                        },
                        {
                            key: "addTableKey",
                            value: function (e) {
                                this.tableKey = e;
                            },
                        },
                        {
                            key: "addIdentifierKey",
                            value: function (e) {
                                this.identifierKey = e;
                            },
                        },
                        {
                            key: "addSession",
                            value: function (e) {
                                this.session = e;
                            },
                        },
                    ]),
                    (n = [
                        {
                            key: "update",
                            value: function (e) {
                                this.session.applyMutation(
                                    new o({
                                        fields: e,
                                        ModelClass: this.ModelClass,
                                        type: l.UPDATE(),
                                        modelId: this.fields[
                                            this.identifierKey
                                        ],
                                    })
                                );
                            },
                        },
                        {
                            key: "delete",
                            value: function () {
                                this.session.applyMutation(
                                    new o({
                                        ModelClass: this.ModelClass,
                                        type: l.DELETE(),
                                        modelId: this.fields[
                                            this.identifierKey
                                        ],
                                    })
                                );
                            },
                        },
                        {
                            key: "_getInstanceRowFromStateOrNull",
                            value: function () {
                                return (
                                    this.session.state[this.tableKey].rows[
                                        this.modelId
                                    ] || null
                                );
                            },
                        },
                    ]) && g(t.prototype, n),
                    r && g(t, r),
                    e
                );
            })();
            function O(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            var k = (function () {
                function e() {
                    !(function (e, t) {
                        if (!(e instanceof t))
                            throw new TypeError(
                                "Cannot call a class as a function"
                            );
                    })(this, e);
                }
                var t, n, r;
                return (
                    (t = e),
                    (r = [
                        {
                            key: "IDENTIFIER",
                            value: function (e) {
                                return new u("IDENTIFIER", e);
                            },
                        },
                    ]),
                    (n = null) && O(t.prototype, n),
                    r && O(t, r),
                    e
                );
            })();
            function _(e) {
                return (_ =
                    "function" == typeof Symbol &&
                    "symbol" == typeof Symbol.iterator
                        ? function (e) {
                              return typeof e;
                          }
                        : function (e) {
                              return e &&
                                  "function" == typeof Symbol &&
                                  e.constructor === Symbol &&
                                  e !== Symbol.prototype
                                  ? "symbol"
                                  : typeof e;
                          })(e);
            }
            function E(e, t) {
                var n = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var r = Object.getOwnPropertySymbols(e);
                    t &&
                        (r = r.filter(function (t) {
                            return Object.getOwnPropertyDescriptor(
                                e,
                                t
                            ).enumerable;
                        })),
                        n.push.apply(n, r);
                }
                return n;
            }
            function S(e) {
                for (var t = 1; t < arguments.length; t++) {
                    var n = null != arguments[t] ? arguments[t] : {};
                    t % 2
                        ? E(Object(n), !0).forEach(function (t) {
                              T(e, t, n[t]);
                          })
                        : Object.getOwnPropertyDescriptors
                        ? Object.defineProperties(
                              e,
                              Object.getOwnPropertyDescriptors(n)
                          )
                        : E(Object(n)).forEach(function (t) {
                              Object.defineProperty(
                                  e,
                                  t,
                                  Object.getOwnPropertyDescriptor(n, t)
                              );
                          });
                }
                return e;
            }
            function T(e, t, n) {
                return (
                    t in e
                        ? Object.defineProperty(e, t, {
                              value: n,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[t] = n),
                    e
                );
            }
            function M(e, t) {
                return (
                    (function (e) {
                        if (Array.isArray(e)) return e;
                    })(e) ||
                    (function (e, t) {
                        if (
                            "undefined" == typeof Symbol ||
                            !(Symbol.iterator in Object(e))
                        )
                            return;
                        var n = [],
                            r = !0,
                            o = !1,
                            i = void 0;
                        try {
                            for (
                                var u, a = e[Symbol.iterator]();
                                !(r = (u = a.next()).done) &&
                                (n.push(u.value), !t || n.length !== t);
                                r = !0
                            );
                        } catch (e) {
                            (o = !0), (i = e);
                        } finally {
                            try {
                                r || null == a.return || a.return();
                            } finally {
                                if (o) throw i;
                            }
                        }
                        return n;
                    })(e, t) ||
                    (function (e, t) {
                        if (!e) return;
                        if ("string" == typeof e) return I(e, t);
                        var n = Object.prototype.toString.call(e).slice(8, -1);
                        "Object" === n &&
                            e.constructor &&
                            (n = e.constructor.name);
                        if ("Map" === n || "Set" === n) return Array.from(e);
                        if (
                            "Arguments" === n ||
                            /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                        )
                            return I(e, t);
                    })(e, t) ||
                    (function () {
                        throw new TypeError(
                            "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
                        );
                    })()
                );
            }
            function I(e, t) {
                (null == t || t > e.length) && (t = e.length);
                for (var n = 0, r = new Array(t); n < t; n++) r[n] = e[n];
                return r;
            }
            function j(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            var P = (function () {
                function e(t) {
                    !(function (e, t) {
                        if (!(e instanceof t))
                            throw new TypeError(
                                "Cannot call a class as a function"
                            );
                    })(this, e),
                        (this.schemaDefinition = t);
                }
                var t, n, r;
                return (
                    (t = e),
                    (r = [
                        {
                            key: "defineIdentifierField",
                            value: function (e) {
                                return k.IDENTIFIER(e);
                            },
                        },
                    ]),
                    (n = [
                        {
                            key: "castValuesAgainstDefinition",
                            value: function (e) {
                                var t = this.getDefinedIdentifierFieldNameOrNull(),
                                    n = t || "id";
                                if (!e[n])
                                    throw new w(
                                        "Value is required for identifier field '".concat(
                                            n,
                                            "'."
                                        )
                                    );
                                return Object.entries(
                                    this.schemaDefinition
                                ).reduce(
                                    function (t, n) {
                                        var r = M(n, 2),
                                            o = r[0],
                                            i = r[1],
                                            a =
                                                i instanceof u
                                                    ? i.getValue()
                                                    : i;
                                        return S(
                                            S({}, t),
                                            {},
                                            T({}, o, new a(e[o]))
                                        );
                                    },
                                    function () {
                                        return t
                                            ? {}
                                            : T({}, "id", Number(e.id));
                                    }.call(this)
                                );
                            },
                        },
                        {
                            key: "assertSchemaAllowsFieldsForMutation",
                            value: function (e, t) {
                                var n = this,
                                    r = ["id"];
                                function o(e) {
                                    return (
                                        !1 === r.includes(e) &&
                                        "undefined" ===
                                            _(this.schemaDefinition[e])
                                    );
                                }
                                Object.keys(t).forEach(function (t) {
                                    if (o.call(n, t))
                                        throw new w(
                                            [
                                                "Cannot apply mutation to ".concat(
                                                    e.toString(),
                                                    " model,"
                                                ),
                                                "found superfluous property '".concat(
                                                    t,
                                                    "'."
                                                ),
                                            ].join(" ")
                                        );
                                });
                            },
                        },
                        {
                            key: "getDefinedIdentifierFieldNameOrNull",
                            value: function () {
                                var e = Object.entries(this.schemaDefinition),
                                    t = e.findIndex(function (e) {
                                        var t = M(e, 2),
                                            n = (t[0], t[1]);
                                        return (
                                            n instanceof u &&
                                            n.equals(k.IDENTIFIER())
                                        );
                                    });
                                return -1 === t ? null : e[t][0];
                            },
                        },
                    ]) && j(t.prototype, n),
                    r && j(t, r),
                    e
                );
            })();
            function R(e, t) {
                var n = Object.keys(e);
                if (Object.getOwnPropertySymbols) {
                    var r = Object.getOwnPropertySymbols(e);
                    t &&
                        (r = r.filter(function (t) {
                            return Object.getOwnPropertyDescriptor(
                                e,
                                t
                            ).enumerable;
                        })),
                        n.push.apply(n, r);
                }
                return n;
            }
            function D(e) {
                for (var t = 1; t < arguments.length; t++) {
                    var n = null != arguments[t] ? arguments[t] : {};
                    t % 2
                        ? R(Object(n), !0).forEach(function (t) {
                              N(e, t, n[t]);
                          })
                        : Object.getOwnPropertyDescriptors
                        ? Object.defineProperties(
                              e,
                              Object.getOwnPropertyDescriptors(n)
                          )
                        : R(Object(n)).forEach(function (t) {
                              Object.defineProperty(
                                  e,
                                  t,
                                  Object.getOwnPropertyDescriptor(n, t)
                              );
                          });
                }
                return e;
            }
            function N(e, t, n) {
                return (
                    t in e
                        ? Object.defineProperty(e, t, {
                              value: n,
                              enumerable: !0,
                              configurable: !0,
                              writable: !0,
                          })
                        : (e[t] = n),
                    e
                );
            }
            function C(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            var F = (function () {
                function e(t) {
                    !(function (e, t) {
                        if (!(e instanceof t))
                            throw new TypeError(
                                "Cannot call a class as a function"
                            );
                    })(this, e),
                        (this.rows = this._createStorageForRows()),
                        (this._meta = this._createStorageForMeta()),
                        (this._keyTable = this._getModelTableName(t)),
                        (this._keyIdentifier = this._getModelIdentifierFieldName(
                            t
                        ));
                }
                var t, n, r;
                return (
                    (t = e),
                    (n = [
                        {
                            key: "getKey",
                            value: function () {
                                return this._keyTable;
                            },
                        },
                        {
                            key: "getIdentifierKey",
                            value: function () {
                                return this._keyIdentifier;
                            },
                        },
                        {
                            key: "getRows",
                            value: function () {
                                return JSON.parse(JSON.stringify(this.rows));
                            },
                        },
                        {
                            key: "insertRow",
                            value: function (e) {
                                var t = function () {
                                    return e[this._keyIdentifier]
                                        ? e[this._keyIdentifier]
                                        : this._getNextId();
                                }.call(this);
                                if (this.rows[t])
                                    throw new w(
                                        "Cannot insert new row since given ID '".concat(
                                            t,
                                            "' is not unique."
                                        )
                                    );
                                (this.rows[t] = D(
                                    D({}, e),
                                    {},
                                    N({}, this._keyIdentifier, t)
                                )),
                                    e[this._keyIdentifier]
                                        ? (this._meta.idBlacklist.push(t),
                                          this._meta.idBlacklist.sort(function (
                                              e,
                                              t
                                          ) {
                                              return e - t;
                                          }))
                                        : (this._meta.lastIdIncremental = t);
                            },
                        },
                        {
                            key: "updateRow",
                            value: function (e, t) {
                                Object.assign(this.rows[e], t);
                            },
                        },
                        {
                            key: "upsertRow",
                            value: function (e) {
                                e[this._keyIdentifier] &&
                                this.rows[e[this._keyIdentifier]]
                                    ? this.updateRow(e[this._keyIdentifier], e)
                                    : this.insertRow(e);
                            },
                        },
                        {
                            key: "deleteRow",
                            value: function (e) {
                                var t = this._meta.idBlacklist,
                                    n = t.indexOf(e);
                                -1 === n || t.splice(n, 1),
                                    delete this.rows[e.toString()];
                            },
                        },
                        {
                            key: "truncate",
                            value: function () {
                                (this.rows = this._createStorageForRows()),
                                    (this._meta = this._createStorageForMeta());
                            },
                        },
                        {
                            key: "_createStorageForRows",
                            value: function () {
                                return {};
                            },
                        },
                        {
                            key: "_createStorageForMeta",
                            value: function () {
                                return {
                                    idBlacklist: [],
                                    lastIdIncremental: 0,
                                };
                            },
                        },
                        {
                            key: "_getNextId",
                            value: function () {
                                var e = this._meta,
                                    t = e.idBlacklist;
                                return (function e(n) {
                                    var r = t.indexOf(n);
                                    return -1 === r
                                        ? n
                                        : r === t.length - 1
                                        ? n + 1
                                        : e(n + 1);
                                })(e.lastIdIncremental + 1);
                            },
                        },
                        {
                            key: "_getModelTableName",
                            value: function (e) {
                                return ""
                                    .concat("table_")
                                    .concat(e.toString().toLowerCase());
                            },
                        },
                        {
                            key: "_getModelIdentifierFieldName",
                            value: function (e) {
                                return (
                                    e
                                        .fields()
                                        .getDefinedIdentifierFieldNameOrNull() ||
                                    "id"
                                );
                            },
                        },
                    ]) && C(t.prototype, n),
                    r && C(t, r),
                    e
                );
            })();
            function A(e) {
                return (A =
                    "function" == typeof Symbol &&
                    "symbol" == typeof Symbol.iterator
                        ? function (e) {
                              return typeof e;
                          }
                        : function (e) {
                              return e &&
                                  "function" == typeof Symbol &&
                                  e.constructor === Symbol &&
                                  e !== Symbol.prototype
                                  ? "symbol"
                                  : typeof e;
                          })(e);
            }
            function K(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function");
            }
            function x(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            function U(e, t) {
                return !t || ("object" !== A(t) && "function" != typeof t)
                    ? (function (e) {
                          if (void 0 === e)
                              throw new ReferenceError(
                                  "this hasn't been initialised - super() hasn't been called"
                              );
                          return e;
                      })(e)
                    : t;
            }
            function q(e) {
                var t = "function" == typeof Map ? new Map() : void 0;
                return (q = function (e) {
                    if (
                        null === e ||
                        ((n = e),
                        -1 ===
                            Function.toString.call(n).indexOf("[native code]"))
                    )
                        return e;
                    var n;
                    if ("function" != typeof e)
                        throw new TypeError(
                            "Super expression must either be null or a function"
                        );
                    if (void 0 !== t) {
                        if (t.has(e)) return t.get(e);
                        t.set(e, r);
                    }
                    function r() {
                        return L(e, arguments, W(this).constructor);
                    }
                    return (
                        (r.prototype = Object.create(e.prototype, {
                            constructor: {
                                value: r,
                                enumerable: !1,
                                writable: !0,
                                configurable: !0,
                            },
                        })),
                        B(r, e)
                    );
                })(e);
            }
            function L(e, t, n) {
                return (L = V()
                    ? Reflect.construct
                    : function (e, t, n) {
                          var r = [null];
                          r.push.apply(r, t);
                          var o = new (Function.bind.apply(e, r))();
                          return n && B(o, n.prototype), o;
                      }).apply(null, arguments);
            }
            function V() {
                if ("undefined" == typeof Reflect || !Reflect.construct)
                    return !1;
                if (Reflect.construct.sham) return !1;
                if ("function" == typeof Proxy) return !0;
                try {
                    return (
                        Date.prototype.toString.call(
                            Reflect.construct(Date, [], function () {})
                        ),
                        !0
                    );
                } catch (e) {
                    return !1;
                }
            }
            function B(e, t) {
                return (B =
                    Object.setPrototypeOf ||
                    function (e, t) {
                        return (e.__proto__ = t), e;
                    })(e, t);
            }
            function W(e) {
                return (W = Object.setPrototypeOf
                    ? Object.getPrototypeOf
                    : function (e) {
                          return e.__proto__ || Object.getPrototypeOf(e);
                      })(e);
            }
            var H = (function (e) {
                !(function (e, t) {
                    if ("function" != typeof t && null !== t)
                        throw new TypeError(
                            "Super expression must either be null or a function"
                        );
                    (e.prototype = Object.create(t && t.prototype, {
                        constructor: {
                            value: e,
                            writable: !0,
                            configurable: !0,
                        },
                    })),
                        t && B(e, t);
                })(a, e);
                var t,
                    n,
                    r,
                    o,
                    i,
                    u =
                        ((t = a),
                        (n = V()),
                        function () {
                            var e,
                                r = W(t);
                            if (n) {
                                var o = W(this).constructor;
                                e = Reflect.construct(r, arguments, o);
                            } else e = r.apply(this, arguments);
                            return U(this, e);
                        });
                function a() {
                    return K(this, a), u.apply(this, arguments);
                }
                return (
                    (r = a),
                    (o = [
                        {
                            key: "name",
                            get: function () {
                                return "HadesUnexpectedValueError";
                            },
                            set: function (e) {},
                        },
                    ]) && x(r.prototype, o),
                    i && x(r, i),
                    a
                );
            })(q(Error));
            function J(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            var $ = (function () {
                function e(t) {
                    !(function (e, t) {
                        if (!(e instanceof t))
                            throw new TypeError(
                                "Cannot call a class as a function"
                            );
                    })(this, e),
                        (this.state = t);
                }
                var t, n, r;
                return (
                    (t = e),
                    (n = [
                        {
                            key: "addModels",
                            value: function (e) {
                                this.models = e;
                            },
                        },
                        {
                            key: "mergeIntoState",
                            value: function (e) {
                                Object.assign(this.state, e);
                            },
                        },
                        {
                            key: "applyMutation",
                            value: function (e) {
                                var t = e.getType(),
                                    n = e.getModelClass(),
                                    r = this._getPointerForModelTableOrNull(n);
                                if (!r)
                                    throw new H(
                                        "Cannot apply mutation to Model without table pointer."
                                    );
                                var o = e.getModelIdOrNull(),
                                    i = e.getFieldsOrNull(),
                                    u = e.getWillApplyToEntireTable();
                                if (
                                    (i &&
                                        n
                                            .fields()
                                            .assertSchemaAllowsFieldsForMutation(
                                                n,
                                                i
                                            ),
                                    t.equals(l.INSERT()))
                                )
                                    this._applyInsertMutation(r, i);
                                else if (t.equals(l.UPSERT()))
                                    this._applyUpsertMutation(r, i);
                                else if (t.equals(l.DELETE()))
                                    this._applyDeleteMutation(r, o, u);
                                else {
                                    if (!t.equals(l.UPDATE()))
                                        throw new H(
                                            "Unexpected mutation type '".concat(
                                                t.getValue(),
                                                "'."
                                            )
                                        );
                                    this._applyUpdateMutation(r, i, o);
                                }
                            },
                        },
                        {
                            key: "_getPointerForModelTableOrNull",
                            value: function (e) {
                                var t = e.getTableKeyOrNull();
                                return t ? this.state[t] : null;
                            },
                        },
                        {
                            key: "_applyDeleteMutation",
                            value: function (e, t, n) {
                                if (n) e.truncate();
                                else {
                                    if (!t)
                                        throw new H(
                                            "Model ID cannot be null for DELETE MutationType."
                                        );
                                    e.deleteRow(t);
                                }
                            },
                        },
                        {
                            key: "_applyInsertMutation",
                            value: function (e, t) {
                                if (!t)
                                    throw new H(
                                        "Fields are required for INSERT MutationType."
                                    );
                                e.insertRow(t);
                            },
                        },
                        {
                            key: "_applyUpsertMutation",
                            value: function (e, t) {
                                if (!t)
                                    throw new H(
                                        "Fields are required for UPSERT MutationType."
                                    );
                                e.upsertRow(t);
                            },
                        },
                        {
                            key: "_applyUpdateMutation",
                            value: function (e, t, n) {
                                if (null === t)
                                    throw new H(
                                        "Fields are required for UPDATE MutationType."
                                    );
                                if (null === n)
                                    throw new H(
                                        "Model ID cannot be null for UPDATE MutationType."
                                    );
                                e.updateRow(n, t);
                            },
                        },
                    ]) && J(t.prototype, n),
                    r && J(t, r),
                    e
                );
            })();
            function z(e) {
                return (z =
                    "function" == typeof Symbol &&
                    "symbol" == typeof Symbol.iterator
                        ? function (e) {
                              return typeof e;
                          }
                        : function (e) {
                              return e &&
                                  "function" == typeof Symbol &&
                                  e.constructor === Symbol &&
                                  e !== Symbol.prototype
                                  ? "symbol"
                                  : typeof e;
                          })(e);
            }
            function G(e, t) {
                if (!(e instanceof t))
                    throw new TypeError("Cannot call a class as a function");
            }
            function Q(e, t) {
                for (var n = 0; n < t.length; n++) {
                    var r = t[n];
                    (r.enumerable = r.enumerable || !1),
                        (r.configurable = !0),
                        "value" in r && (r.writable = !0),
                        Object.defineProperty(e, r.key, r);
                }
            }
            var X = (function () {
                function e() {
                    G(this, e);
                    for (
                        var t = arguments.length, n = new Array(t), r = 0;
                        r < t;
                        r++
                    )
                        n[r] = arguments[r];
                    this._registerModels(n);
                }
                var t, n, r;
                return (
                    (t = e),
                    (n = [
                        {
                            key: "reducer",
                            value: function () {
                                var e = this;
                                return function () {
                                    var t =
                                            arguments.length > 0 &&
                                            void 0 !== arguments[0]
                                                ? arguments[0]
                                                : {},
                                        n =
                                            arguments.length > 1
                                                ? arguments[1]
                                                : void 0,
                                        r = e._createSession(t);
                                    return (
                                        e._forModelsInSessionCreateTablesIfNeeded(
                                            r
                                        ),
                                        e._forModelsInSessionApplyReducers(
                                            r,
                                            n
                                        ),
                                        r.state
                                    );
                                };
                            },
                        },
                        {
                            key: "_registerModels",
                            value: function (e) {
                                this.registeredModels = e.reduce(
                                    function (e, t) {
                                        return (
                                            e.includes(t)
                                                ? this._createWarningDuplicateModel(
                                                      t.toString()
                                                  )
                                                : e.push(t),
                                            e
                                        );
                                    }.bind(this),
                                    []
                                );
                            },
                        },
                        {
                            key: "_createSession",
                            value: function (e) {
                                var t = new $(e);
                                return (
                                    t.addModels(this.registeredModels),
                                    this.registeredModels.forEach(function (e) {
                                        e.addSession(t);
                                    }),
                                    t
                                );
                            },
                        },
                        {
                            key: "_forModelsInSessionCreateTablesIfNeeded",
                            value: function (e) {
                                e.models.forEach(function (t) {
                                    var n,
                                        r,
                                        o,
                                        i = t.getTableKeyOrNull();
                                    if (i && e.state[i]);
                                    else {
                                        var u = new F(t),
                                            a = u.getKey();
                                        t.addTableKey(a),
                                            t.addIdentifierKey(
                                                u.getIdentifierKey()
                                            ),
                                            e.mergeIntoState(
                                                ((o = u),
                                                (r = a) in (n = {})
                                                    ? Object.defineProperty(
                                                          n,
                                                          r,
                                                          {
                                                              value: o,
                                                              enumerable: !0,
                                                              configurable: !0,
                                                              writable: !0,
                                                          }
                                                      )
                                                    : (n[r] = o),
                                                n)
                                            );
                                    }
                                });
                            },
                        },
                        {
                            key: "_forModelsInSessionApplyReducers",
                            value: function (e, t) {
                                e.models.forEach(function (e) {
                                    "function" === z(e.reducer) && e.reducer(t);
                                });
                            },
                        },
                        {
                            key: "_createWarningDuplicateModel",
                            value: function (e) {
                                console.warn(
                                    "Tried to register duplicate Model: '".concat(
                                        e,
                                        "'."
                                    )
                                );
                            },
                        },
                    ]) && Q(t.prototype, n),
                    r && Q(t, r),
                    e
                );
            })();
        },
    ])
);
//# sourceMappingURL=hades.min.js.map
